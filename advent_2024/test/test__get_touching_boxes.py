from advent_2024.day_15.p2 import _get_touching_boxes, _can_move, _move_boxes
from advent_2024.test.utility import dict_parametrize

TOWER_SCENARIO = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", "[", "]", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
FORK = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", "[", "]", "[", "]", "[", "]", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
ONLY_ONE = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", "[", "]", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "@", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]


@dict_parametrize(
    {
        "real_case_streamline_up": {
            "boxes": [
                ((19, 44), (19, 45)),
                ((20, 44), (20, 45)),
                ((20, 46), (20, 47)),
                ((21, 42), (21, 43)),
                ((21, 44), (21, 45)),
                ((21, 46), (21, 47)),
                ((21, 48), (21, 49)),
                ((22, 43), (22, 44)),
            ],
            "contact_start": (22, 43),
            "dr": -1,
            "expected_touching": [
                ((22, 43), (22, 44)),
                ((21, 42), (21, 43)),
                ((21, 44), (21, 45)),
                ((20, 44), (20, 45)),
                ((19, 44), (19, 45)),
            ],
        },
        "tower_up": {
            "boxes": [
                ((4, 6), (4, 7)),
                ((2, 6), (2, 7)),
                ((3, 6), (3, 7)),
                ((2, 8), (2, 9)),
            ],
            "contact_start": (4, 7),
            "dr": -1,
            "expected_touching": [
                ((4, 6), (4, 7)),
                ((3, 6), (3, 7)),
                ((2, 6), (2, 7)),
            ],
        },
        "tower_down": {
            "boxes": [
                ((4, 6), (4, 7)),
                ((2, 6), (2, 7)),
                ((3, 6), (3, 7)),
                ((2, 8), (2, 9)),
            ],
            "contact_start": (2, 7),
            "dr": 1,
            "expected_touching": [
                ((2, 6), (2, 7)),
                ((3, 6), (3, 7)),
                ((4, 6), (4, 7)),
            ],
        },
        "fork_up": {
            "boxes": [
                ((4, 6), (4, 7)),
                ((2, 6), (2, 7)),
                ((3, 5), (3, 6)),
                ((3, 7), (3, 8)),
                ((2, 4), (2, 5)),
                ((2, 8), (2, 9)),
            ],
            "contact_start": (4, 7),
            "dr": -1,
            "expected_touching": [
                ((4, 6), (4, 7)),
                ((3, 5), (3, 6)),
                ((3, 7), (3, 8)),
                ((2, 4), (2, 5)),
                ((2, 6), (2, 7)),
                ((2, 8), (2, 9)),
            ],
        },
        "fork_down": {
            "boxes": [
                ((4, 6), (4, 7)),
                ((2, 6), (2, 7)),
                ((3, 5), (3, 6)),
                ((3, 7), (3, 8)),
                ((2, 4), (2, 5)),
                ((2, 8), (2, 9)),
            ],
            "contact_start": (2, 7),
            "dr": 1,
            "expected_touching": [
                ((2, 6), (2, 7)),
                ((3, 5), (3, 6)),
                ((3, 7), (3, 8)),
                ((4, 6), (4, 7)),
            ],
        },
    }
)
def test__get_touching_boxes(boxes, dr, contact_start, expected_touching):
    assert (
        _get_touching_boxes(boxes=boxes, dr=dr, contact_start=contact_start)
        == expected_touching
    )


TEST_GRID_NO_BLOCKED_UP = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
TEST_GRID_BLOCKED_UP = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
TEST_GRID_NOT_BLOCKED_DOWN = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "#", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
EXPECTED_GRID_AFTER_3_UP = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
TEST_GRID_AFTER_2_DOWN = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]


@dict_parametrize(
    {
        "not_blocked_dot_up": {
            "box": ((3, 5), (3, 6)),
            "move": "^",
            "grid": TEST_GRID_NO_BLOCKED_UP,
            "expected_bool": True,
        },
        "not_blocked_box_up": {
            "box": ((4, 6), (4, 7)),
            "move": "^",
            "grid": TEST_GRID_NO_BLOCKED_UP,
            "expected_bool": True,
        },
        "not_blocked_box_down": {
            "box": ((3, 7), (3, 8)),
            "move": "v",
            "grid": TEST_GRID_NOT_BLOCKED_DOWN,
            "expected_bool": True,
        },
        "blocked": {
            "box": ((3, 5), (3, 6)),
            "move": "^",
            "grid": TEST_GRID_BLOCKED_UP,
            "expected_bool": False,
        },
    }
)
def test__can_move(box, move, grid, expected_bool):
    assert _can_move(box=box, move=move, grid=grid) == expected_bool


@dict_parametrize(
    {
        "move_3_up": {
            "to_move": [((4, 6), (4, 7)), ((3, 5), (3, 6)), ((3, 7), (3, 8))],
            "move": "^",
            "grid": TEST_GRID_NO_BLOCKED_UP,
            "robot": (5, 7),
            "expected_grid": EXPECTED_GRID_AFTER_3_UP,
        },
        "move_2_down": {
            "to_move": [((4, 6), (4, 7)), ((3, 7), (3, 8))],
            "move": "^",
            "grid": TEST_GRID_AFTER_2_DOWN,
            "robot": (5, 7),
            "expected_grid": TEST_GRID_AFTER_2_DOWN,
        },
    }
)
def test__move_boxes(to_move, move, grid, robot, expected_grid):
    assert (
        _move_boxes(to_move=to_move, move=move, grid=grid, robot=robot) == expected_grid
    )
