from advent_2024.day_15.p2 import _should_move, _can_move, _move_boxes
from advent_2024.test.utility import dict_parametrize


@dict_parametrize(
    {
        "1_row_up_right": {
            "contact_box": ((3, 2), (3, 3)),
            "box": ((2, 3), (2, 4)),
            "move": "^",
            "expected_bool": True,
        },
        "2_rows_up_left": {
            "contact_box": ((3, 2), (3, 3)),
            "box": ((1, 0), (1, 1)),
            "move": "^",
            "expected_bool": True,
        },
        "below_when_up_move": {
            "contact_box": ((3, 2), (3, 3)),
            "box": ((4, 2), (4, 3)),
            "move": "^",
            "expected_bool": False,
        },
        "above_when_down_move": {
            "contact_box": ((3, 2), (3, 3)),
            "box": ((1, 2), (1, 3)),
            "move": "v",
            "expected_bool": False,
        },
        "1_row_up_too_far_right": {
            "contact_box": ((3, 2), (3, 3)),
            "box": ((2, 5), (2, 6)),
            "move": "^",
            "expected_bool": False,
        },
    }
)
def test__should_move(contact_box, box, move, expected_bool):
    assert _should_move(contact_box=contact_box, box=box, move=move) == expected_bool


TEST_GRID_NO_BLOCKED_UP = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
TEST_GRID_BLOCKED_UP = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
TEST_GRID_NOT_BLOCKED_DOWN = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "#", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
EXPECTED_GRID_AFTER_3_UP = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]
TEST_GRID_AFTER_2_DOWN = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", ".", "#", "#", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", "[", "]", "@", ".", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", ".", "[", "]", ".", ".", ".", "#", "#"],
    ["#", "#", ".", ".", ".", ".", "[", "]", ".", ".", ".", ".", "#", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]


@dict_parametrize(
    {
        "not_blocked_dot_up": {
            "box": ((3, 5), (3, 6)),
            "move": "^",
            "grid": TEST_GRID_NO_BLOCKED_UP,
            "expected_bool": True,
        },
        "not_blocked_box_up": {
            "box": ((4, 6), (4, 7)),
            "move": "^",
            "grid": TEST_GRID_NO_BLOCKED_UP,
            "expected_bool": True,
        },
        "not_blocked_box_down": {
            "box": ((3, 7), (3, 8)),
            "move": "v",
            "grid": TEST_GRID_NOT_BLOCKED_DOWN,
            "expected_bool": True,
        },
        "blocked": {
            "box": ((3, 5), (3, 6)),
            "move": "^",
            "grid": TEST_GRID_BLOCKED_UP,
            "expected_bool": False,
        },
    }
)
def test__can_move(box, move, grid, expected_bool):
    assert _can_move(box=box, move=move, grid=grid) == expected_bool


@dict_parametrize(
    {
        "move_3_up": {
            "to_move": [((4, 6), (4, 7)), ((3, 5), (3, 6)), ((3, 7), (3, 8))],
            "move": "^",
            "grid": TEST_GRID_NO_BLOCKED_UP,
            "robot": (5, 7),
            "expected_grid": EXPECTED_GRID_AFTER_3_UP,
        },
        "move_2_down": {
            "to_move": [((4, 6), (4, 7)), ((3, 7), (3, 8))],
            "move": "^",
            "grid": TEST_GRID_AFTER_2_DOWN,
            "robot": (5, 7),
            "expected_grid": TEST_GRID_AFTER_2_DOWN,
        },
    }
)
def test__move_boxes(to_move, move, grid, robot, expected_grid):
    assert (
        _move_boxes(to_move=to_move, move=move, grid=grid, robot=robot) == expected_grid
    )
